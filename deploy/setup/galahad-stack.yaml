AWSTemplateFormatVersion: 2010-09-09
Description: Sets up a single VPC Multi Subnet Configuration for Galahad/VirtUE
Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair
  NameSuffix:
    Description: Suffix to add to all 'Name' tags for easy searching and viewing
    Type: String
    MinLength: 1
    MaxLength: 5
    AllowedPattern: '^[a-zA-Z0-9]+$'
  ImportStackName:
    Description: Name of Stack to import VPC/Subnets from
    Type: String
    Default: None
    ConstraintDescription: Specify Name of Stack that creates a VPC and other network resources.
Resources:
  VirtueHostedZone:
    Type: 'AWS::Route53::HostedZone'
    Properties:
      HostedZoneConfig:
        Comment: "VPC-private zone for service discovery"
      HostedZoneTags:
        - Key: Project
          Value: Virtue
        - Key: Name
          Value: !Join
            - ''
            - - VirtUE-
              - !Ref NameSuffix
              - '-Zone'
      Name: !Join
          - ''
          - - 'galahad.'
            - 'com'
      VPCs:
        - VPCId:
            "Fn::ImportValue": !Sub "${ImportStackName}--VIRTUE-VPCID"
          VPCRegion: !Ref "AWS::Region"
  VirtUEAdminADSecGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: >-
        VirtUE Security Group for the VirtUE AD Server on the Administration
        Network
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: General Traffic Out
          FromPort: '-0'
          ToPort: '65535'
          IpProtocol: '-1'
      SecurityGroupIngress:
        - CidrIp: 172.30.0.0/16
          Description: Allow Talking Internally
          FromPort: '0'
          ToPort: '65535'
          IpProtocol: '-1'
        - CidrIp: 0.0.0.0/0
          Description: RDP Inn
          FromPort: '3389'
          ToPort: '3389'
          IpProtocol: '-1'
      Tags:
        - Key: Project
          Value: Virtue
        - Key: Name
          Value: !Join
            - ''
            - - VirtUE-
              - !Ref NameSuffix
              - '-AdminADSecGroup'
      VpcId:
        "Fn::ImportValue": !Sub "${ImportStackName}--VIRTUE-VPCID"
  VirtUEAdminSecGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: VirtUE Security Group for the VirtUE Administration Network
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: General Traffic Out
          FromPort: '0'
          ToPort: '65535'
          IpProtocol: '-1'
      SecurityGroupIngress:
        - CidrIp: 172.30.0.0/16
          Description: Allow Talking Internally
          FromPort: '0'
          ToPort: '65535'
          IpProtocol: '-1'
        - CidrIp: 0.0.0.0/0
          Description: SSH TCP In
          FromPort: '22'
          ToPort: '22'
          IpProtocol: tcp
        - CidrIp: 0.0.0.0/0
          Description: HTTP TCP In
          FromPort: '8080'
          ToPort: '8080'
          IpProtocol: tcp
      Tags:
        - Key: Project
          Value: Virtue
        - Key: Name
          Value: !Join
            - ''
            - - VirtUE-
              - !Ref NameSuffix
              - '-AdminSecGroup'
      VpcId:
        "Fn::ImportValue": !Sub "${ImportStackName}--VIRTUE-VPCID"
  VirtUEUserSecGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: VirtUE Security Group for the VirtUE User Network
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/16
          Description: General Traffic Out
          FromPort: '0'
          ToPort: '65535'
          IpProtocol: '-1'
      SecurityGroupIngress:
        - CidrIp: 172.30.0.0/16
          Description: AllowTalkingInternally
          FromPort: '0'
          ToPort: '65535'
          IpProtocol: '-1'
        - CidrIp: 0.0.0.0/0
          Description: SSH TCP In
          FromPort: '22'
          ToPort: '22'
          IpProtocol: tcp
      Tags:
        - Key: Project
          Value: Virtue
        - Key: Name
          Value: !Join
            - ''
            - - VirtUE-
              - !Ref NameSuffix
              - '-UserSecGroup'
      VpcId:
        "Fn::ImportValue": !Sub "${ImportStackName}--VIRTUE-VPCID"
  VirtUEUserStandbySecGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: VirtUE Security Group for the VirtUE User Standby Instance Pool.
      SecurityGroupEgress: []
      SecurityGroupIngress: []
      Tags:
        - Key: Project
          Value: Virtue
        - Key: Name
          Value: !Join
            - ''
            - - VirtUE-
              - !Ref NameSuffix
              - '-UserStandbySecGroup'
      VpcId:
        "Fn::ImportValue": !Sub "${ImportStackName}--VIRTUE-VPCID"
  VirtUEValorEFS:
    Type: 'AWS::EFS::FileSystem'
    Properties:
      FileSystemTags:
        - Key: Project
          Value: Virtue
        - Key: Name
          Value: !Join
            - ''
            - - VirtUE-
              - !Ref NameSuffix
              - '-ValorEFS'
  VirtUEValorEFSTarget:
    Type: 'AWS::EFS::MountTarget'
    DependsOn:
      - VirtUEValorEFS
    Properties:
      FileSystemId: !Ref VirtUEValorEFS
      SecurityGroups:
        - !Ref VirtUEAdminSecGroup
      SubnetId:
        "Fn::ImportValue": !Sub "${ImportStackName}--ADMIN-SUBNETID"
  ExcaliburServer:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: ami-a4dc46db
      InstanceType: t2.medium
      KeyName: !Ref KeyName
      BlockDeviceMappings:
        - DeviceName: "/dev/sda1"
          Ebs:
            DeleteOnTermination: "true"
            VolumeSize: 64
      NetworkInterfaces:
        - DeviceIndex: '0'
          PrivateIpAddress: 172.30.1.44
          SubnetId:
            "Fn::ImportValue": !Sub "${ImportStackName}--ADMIN-SUBNETID"
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe

          # Install Packages required for AWS EFS mount helper
          apt-get update
          apt-get -y install binutils

          # Install the AWS EFS mount helper
          git clone https://github.com/aws/efs-utils
          cd efs-utils/
          ./build-deb.sh
          apt-get -y install ./build/amazon-efs-utils*deb

          # Create the base mount directory
          mkdir -p /mnt/efs

          # Mount the EFS file system
          echo "${VirtUEValorEFS}:/ /mnt/efs efs defaults,_netdev 0 0" >> /etc/fstab
          mount -a
      Tags:
        - Key: Project
          Value: Virtue
        - Key: Name
          Value: !Join
            - ''
            - - VirtUE-
              - !Ref NameSuffix
              - '-Excalibur'
    DependsOn:
      - VirtUEValorEFSTarget
  CanvasInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: ami-0f9cf087c1f27d9b1
      InstanceType: t2.small
      KeyName: !Ref KeyName
      BlockDeviceMappings:
        - DeviceName: "/dev/sda1"
          Ebs:
            DeleteOnTermination: "true"
      NetworkInterfaces:
        - DeviceIndex: '0'
          PrivateIpAddress: 172.30.1.50
          SubnetId:
            "Fn::ImportValue": !Sub "${ImportStackName}--ADMIN-SUBNETID"
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe

          # Install Packages required for AWS EFS mount helper
          apt-get update
          apt-get -y install binutils

          # Install the AWS EFS mount helper
          git clone https://github.com/aws/efs-utils
          cd efs-utils/
          ./build-deb.sh
          apt-get -y install ./build/amazon-efs-utils*deb

          # Create the base mount directory
          mkdir -p /mnt/efs

          # Mount the EFS file system
          echo "${VirtUEValorEFS}:/ /mnt/efs efs defaults,_netdev 0 0" >> /etc/fstab
          mount -a

          # Install the desktop
          apt-get install -y --no-install-recommends ubuntu-desktop gnome-panel gnome-settings-daemon metacity gnome-terminal
          apt-get install -y nautilus

          # Install needed library for nwjs
          apt-get install -y npm libxss1

          # Packages for pip3 and firefox
          apt-get install -y firefox python3-pip

          # Python module for CLI
          pip3 install prompt_toolkit

          # Python modules for updating Unity Image
          pip3 install sultan boto3

          # Install VNC server
          apt-get install -y vnc4server

          # Add DNS for canvas.com for canvas to work
          echo "127.0.0.1 canvas.com" >> /etc/hosts

          # Configure the VNC server
          su - ubuntu -c "mkdir .vnc"
          su - ubuntu -c "(echo canvas4U;echo canvas4U) | vncpasswd"
          su - ubuntu -c "vncserver"
          su - ubuntu -c "vncserver -kill :1"
          su - ubuntu -c "echo -e \"\ngnome-panel &\ngnome-settings-daemon &\nmetacity &\nnautilus &\" >> .vnc/xstartup"
          su - ubuntu -c "vncserver -geometry 1600x1200"

          # Download the NWJS Package and untar it
          su - ubuntu -c "wget https://dl.nwjs.io/v0.34.5/nwjs-sdk-v0.34.5-linux-x64.tar.gz"
          su - ubuntu -c "tar -xzf nwjs-sdk-v0.34.5-linux-x64.tar.gz"
      Tags:
        - Key: Project
          Value: Virtue
        - Key: Name
          Value: !Join
            - ''
            - - VirtUE-
              - !Ref NameSuffix
              - '-Canvas'
    DependsOn:
      - VirtUEValorEFSTarget
  GalahadAD:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: ami-0e445010152f0abc4
      InstanceType: t2.medium
      KeyName: !Ref KeyName
      BlockDeviceMappings:
        - DeviceName: "/dev/sda1"
          Ebs:
            DeleteOnTermination: "true"
      NetworkInterfaces:
        - DeviceIndex: '0'
          PrivateIpAddress: 172.30.1.250
          SubnetId:
            "Fn::ImportValue": !Sub "${ImportStackName}--ADMIN-SUBNETID"
      Tags:
        - Key: Project
          Value: Virtue
        - Key: Name
          Value: !Join
            - ''
            - - VirtUE-
              - !Ref NameSuffix
              - '-AD'
  RethinkDB:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: ami-a4dc46db
      InstanceType: t2.medium
      KeyName: !Ref KeyName
      BlockDeviceMappings:
        - DeviceName: "/dev/sda1"
          Ebs:
            DeleteOnTermination: "true"
      NetworkInterfaces:
        - DeviceIndex: '0'
          PrivateIpAddress: 172.30.1.45
          SubnetId:
            "Fn::ImportValue": !Sub "${ImportStackName}--ADMIN-SUBNETID"
      Tags:
        - Key: Project
          Value: Virtue
        - Key: Name
          Value: !Join
            - ''
            - - VirtUE-
              - !Ref NameSuffix
              - '-RethinkDB'
    DependsOn:
      - VirtUEValorEFSTarget
  GalahadAggregator:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: ami-a4dc46db
      InstanceType: t2.large
      KeyName: !Ref KeyName
      BlockDeviceMappings:
        - DeviceName: "/dev/sda1"
          Ebs:
            DeleteOnTermination: "true"
      NetworkInterfaces:
        - DeviceIndex: '0'
          PrivateIpAddress: 172.30.1.46
          SubnetId:
            "Fn::ImportValue": !Sub "${ImportStackName}--ADMIN-SUBNETID"
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe

          # Install Packages required for AWS EFS mount helper
          apt-get update
          apt-get -y install binutils

          # Install the AWS EFS mount helper
          git clone https://github.com/aws/efs-utils
          cd efs-utils/
          ./build-deb.sh
          apt-get -y install ./build/amazon-efs-utils*deb

          # Create the base mount directory
          mkdir -p /mnt/efs

          # Mount the EFS file system
          echo "${VirtUEValorEFS}:/ /mnt/efs efs defaults,_netdev 0 0" >> /etc/fstab
          mount -a

          # Install docker
          apt-get install -y apt-transport-https ca-certificates curl software-properties-common
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
          add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
          apt-get update
          apt-get install -y docker-ce

          # Enable docker for ubuntu user
          usermod -aG docker ubuntu

          # Install docker compose
          curl -L "https://github.com/docker/compose/releases/download/1.23.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose

          # Clone the docker-virtue dir which has the aggregator setup files
          su - ubuntu -c "git clone https://github.com/starlab-io/docker-virtue.git"

          # Download the docker images
          bash /home/ubuntu/docker-virtue/elastic/image_pull.sh
      Tags:
        - Key: Project
          Value: Virtue
        - Key: Name
          Value: !Join
            - ''
            - - VirtUE-
              - !Ref NameSuffix
              - '-Aggregator'
    DependsOn:
      - VirtUEValorEFSTarget
  ValorRouter:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: ami-a4dc46db
      InstanceType: t2.medium
      KeyName: !Ref KeyName
      NetworkInterfaces:
        - DeviceIndex: '0'
          PrivateIpAddress: 172.30.1.53
          SubnetId:
            "Fn::ImportValue": !Sub "${ImportStackName}--ADMIN-SUBNETID"
      SourceDestCheck: False
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe

          # Install Packages required for AWS EFS mount helper
          apt-get update
          apt-get -y install binutils

          # Install the AWS EFS mount helper
          git clone https://github.com/aws/efs-utils
          cd efs-utils/
          ./build-deb.sh
          apt-get -y install ./build/amazon-efs-utils*deb

          # Create the base mount directory
          mkdir -p /mnt/efs

          # Mount the EFS file system
          echo "${VirtUEValorEFS}:/ /mnt/efs efs defaults,_netdev 0 0" >> /etc/fstab
          mount -a

          # Install System packages required for the Router
          apt-get -y install python-pip openvswitch-common openvswitch-switch bridge-utils

          # Install pip packages
          pip install rethinkdb
          pip install boto
      Tags:
        - Key: Project
          Value: Virtue
        - Key: Name
          Value: !Join
            - ''
            - - VirtUE-
              - !Ref NameSuffix
              - '-ValorRouter'
    DependsOn:
      - VirtUEValorEFSTarget
      - RethinkDB
  XenPVMBuilder:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: ami-a4dc46db
      InstanceType: t2.medium
      KeyName: !Ref KeyName
      BlockDeviceMappings:
        - DeviceName: "/dev/sda1"
          Ebs:
            DeleteOnTermination: "true"
      NetworkInterfaces:
        - DeviceIndex: '0'
          PrivateIpAddress: 172.30.1.47
          SubnetId:
            "Fn::ImportValue": !Sub "${ImportStackName}--ADMIN-SUBNETID"
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe

          # Install Packages required for AWS EFS mount helper
          apt-get update
          apt-get -y install binutils

          # Install the AWS EFS mount helper
          git clone https://github.com/aws/efs-utils
          cd efs-utils/
          ./build-deb.sh
          apt-get -y install ./build/amazon-efs-utils*deb

          # Create the base mount directory
          mkdir -p /mnt/efs

          # Mount the EFS file system
          echo "${VirtUEValorEFS}:/ /mnt/efs efs defaults,_netdev 0 0" >> /etc/fstab
          mount -a

          # Install Xen Tools required for creating the Xen Images
          DEBIAN_FRONTEND=noninteractive apt-get install -y xen-tools
      Tags:
        - Key: Project
          Value: Virtue
        - Key: Name
          Value: !Join
            - ''
            - - VirtUE-
              - !Ref NameSuffix
              - '-XenPVMBuilder'
    DependsOn:
      - VirtUEValorEFSTarget
      - RethinkDB
  ExcaliburServerDNSRecord:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      HostedZoneId: !Ref VirtueHostedZone
      Name: !Join
          - ''
          - - 'excalibur.'
            - 'galahad.'
            - 'com'
            - '.'
      Type: A
      TTL: '900'
      ResourceRecords:
        - !GetAtt ExcaliburServer.PrivateIp
    DependsOn:
        - VirtueHostedZone
        - ExcaliburServer
  GalahadADDNSRecord:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      HostedZoneId: !Ref VirtueHostedZone
      Name: !Join
          - ''
          - - 'ad.'
            - 'galahad.'
            - 'com'
            - '.'
      Type: A
      TTL: '900'
      ResourceRecords:
        - !GetAtt GalahadAD.PrivateIp
    DependsOn:
        - VirtueHostedZone
        - GalahadAD
  RethinkDBDNSRecord:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      HostedZoneId: !Ref VirtueHostedZone
      Name: !Join
          - ''
          - - 'rethinkdb.'
            - 'galahad.'
            - 'com'
            - '.'
      Type: A
      TTL: '900'
      ResourceRecords:
        - !GetAtt RethinkDB.PrivateIp
    DependsOn:
        - VirtueHostedZone
        - RethinkDB
  ValorRouterDNSRecord:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      HostedZoneId: !Ref VirtueHostedZone
      Name: !Join
          - ''
          - - 'valor-router.'
            - 'galahad.'
            - 'com'
            - '.'
      Type: A
      TTL: '900'
      ResourceRecords:
        - !GetAtt ValorRouter.PrivateIp
    DependsOn:
        - VirtueHostedZone
        - ValorRouter
  GalahadAggregatorDNSRecord:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      HostedZoneId: !Ref VirtueHostedZone
      Name: !Join
          - ''
          - - 'aggregator.'
            - 'galahad.'
            - 'com'
            - '.'
      Type: A
      TTL: '900'
      ResourceRecords:
        - !GetAtt GalahadAggregator.PrivateIp
    DependsOn:
        - VirtueHostedZone
        - GalahadAggregator
  XenPVMBuilderDNSRecord:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      HostedZoneId: !Ref VirtueHostedZone
      Name: !Join
          - ''
          - - 'xenpvmbuilder.'
            - 'galahad.'
            - 'com'
            - '.'
      Type: A
      TTL: '900'
      ResourceRecords:
        - !GetAtt XenPVMBuilder.PrivateIp
    DependsOn:
        - VirtueHostedZone
        - XenPVMBuilder
  CanvasInstanceDNSRecord:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      HostedZoneId: !Ref VirtueHostedZone
      Name: !Join
          - ''
          - - 'canvas.'
            - 'galahad.'
            - 'com'
            - '.'
      Type: A
      TTL: '900'
      ResourceRecords:
        - !GetAtt CanvasInstance.PrivateIp
    DependsOn:
        - VirtueHostedZone
        - CanvasInstance
Outputs:
  MountTargetID:
    Description: Mount target ID
    Value: !Ref VirtUEValorEFSTarget
  FileSystemID:
    Description: File system ID
    Value: !Ref VirtUEValorEFS
