@version: 3.14
@module mod-java
@include "scl.conf"


source s_local { systemd-journal(); internal(); };

source s_auditd {
    file(/var/log/audit/audit.log flags(no-parse));
};

template add_virtue_id {
    template("VirtueID: $(env VIRTUE_ID) ${MESSAGE}\n");
};

destination d_file { 
    file("/var/log/syslog-ng-msg" 
        template(add_virtue_id)
    );
};

destination d_elastic {
    elasticsearch2(
        client-lib-dir("/etc/syslog-ng/jars/")
        index("syslog-${YEAR}.${MONTH}.${DAY}")
        type("syslog")
        time-zone("UTC")
        client-mode("https")
        cluster("docker-cluster")
        cluster-url("%s")
        java_keystore_filepath("/etc/syslog-ng/kirk-keystore.jks")
        java_keystore_password("changeit")
        http_auth_type("clientcert")
        resource("/etc/syslog-ng/elasticsearch.yml")
        template("$(format-json --scope rfc3164 --scope nv-pairs --exclude DATE --pair VirtueID=$(env VIRTUE_ID) @timestamp=${ISODATE} @virtue_ip=${HOST})")
    );
};

destination d_network { 
    syslog("%s" 
        transport("tcp") 
        template("${S_ISODATE} ${HOST} ${MESSAGE}") 
        template(add_virtue_id)
    );
};

parser p_auditd {
    linux-audit-parser (prefix(".auditd."));
};

parser apparmor_parser {
    kv-parser(value-separator("="));
};

filter apparmor_logs {
    match("*" type(glob) value("apparmor"));  
};

parser message_parser {
    kv-parser(value-separator(":"));
};    

parser transducer_controller {
    transducer_controller(
            socket("/var/run/receiver_to_filter")
    );
};

filter remove_self_reports {
    not (match("syslog-ng" value("ProcName")) or
    match("syslog-ng" value("ParentName")));
};

filter remove_merlin_reports {
    not match("/var/run/receiver_to_filter" value("Addr"));
};

log { 
    source(s_local); 
    filter { match("kernel" value("PROGRAM")) or match("winesrv" value("PROGRAM")) };
    parser(message_parser);
    parser(transducer_controller);
    filter(remove_self_reports);
    filter(remove_merlin_reports);
    destination(d_file);
    destination(d_elastic);
    destination(d_network);
};

log {
    source(s_local);
    filter{ facility(auth); };

    junction {
        channel {
            filter(apparmor_logs);
            parser(apparmor_parser);
            flags(final);
        };
        channel {
            flags(final);
        };
    };

    destination(d_file);
    destination(d_elastic);
    destination(d_network);
};

log {
    source(s_auditd);
    parser(p_auditd);
    destination(d_file);
    destination(d_elastic);
    destination(d_network);
};
